// Code generated by protoc-gen-go.
// source: zebra.proto
// DO NOT EDIT!

/*
Package zebra is a generated protocol buffer package.

It is generated from these files:
	zebra.proto

It has these top-level messages:
	InterfaceRequest
	InterfaceUpdate
	RouterIdRequest
	RouterIdUpdate
	RedistributeIPv4Request
	RedistributeIPv6Request
	IPv4
	PrefixIPv4
	NexthopIPv4
	AddressIPv4
	PrefixIPv6
	NexthopIPv6
	AddressIPv6
	RouteIPv4
	RouteIPv6
*/
package zebra

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type RouteType int32

const (
	RouteType_RIB_UNKNOWN   RouteType = 0
	RouteType_RIB_SYSTEM    RouteType = 1
	RouteType_RIB_CONNECTED RouteType = 2
	RouteType_RIB_STATIC    RouteType = 3
	RouteType_RIB_RIP       RouteType = 4
	RouteType_RIB_OSPF      RouteType = 5
	RouteType_RIB_ISIS      RouteType = 6
	RouteType_RIB_BGP       RouteType = 7
)

var RouteType_name = map[int32]string{
	0: "RIB_UNKNOWN",
	1: "RIB_SYSTEM",
	2: "RIB_CONNECTED",
	3: "RIB_STATIC",
	4: "RIB_RIP",
	5: "RIB_OSPF",
	6: "RIB_ISIS",
	7: "RIB_BGP",
}
var RouteType_value = map[string]int32{
	"RIB_UNKNOWN":   0,
	"RIB_SYSTEM":    1,
	"RIB_CONNECTED": 2,
	"RIB_STATIC":    3,
	"RIB_RIP":       4,
	"RIB_OSPF":      5,
	"RIB_ISIS":      6,
	"RIB_BGP":       7,
}

func (x RouteType) String() string {
	return proto.EnumName(RouteType_name, int32(x))
}
func (RouteType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type RouteSubType int32

const (
	RouteSubType_RIB_SUB_OSPF_IA         RouteSubType = 0
	RouteSubType_RIB_SUB_OSPF_NSSA_1     RouteSubType = 1
	RouteSubType_RIB_SUB_OSPF_NSSA_2     RouteSubType = 2
	RouteSubType_RIB_SUB_OSPF_EXTERNAL_1 RouteSubType = 3
	RouteSubType_RIB_SUB_OSPF_EXTERNAL_2 RouteSubType = 4
	RouteSubType_RIB_SUB_BGP_IBGP        RouteSubType = 5
	RouteSubType_RIB_SUB_BGP_EBGP        RouteSubType = 6
	RouteSubType_RIB_SUB_BGP_CONFED      RouteSubType = 7
	RouteSubType_RIB_SUB_ISIS_L1         RouteSubType = 8
	RouteSubType_RIB_SUB_ISIS_L2         RouteSubType = 9
	RouteSubType_RIB_SUB_ISIS_IA         RouteSubType = 10
)

var RouteSubType_name = map[int32]string{
	0:  "RIB_SUB_OSPF_IA",
	1:  "RIB_SUB_OSPF_NSSA_1",
	2:  "RIB_SUB_OSPF_NSSA_2",
	3:  "RIB_SUB_OSPF_EXTERNAL_1",
	4:  "RIB_SUB_OSPF_EXTERNAL_2",
	5:  "RIB_SUB_BGP_IBGP",
	6:  "RIB_SUB_BGP_EBGP",
	7:  "RIB_SUB_BGP_CONFED",
	8:  "RIB_SUB_ISIS_L1",
	9:  "RIB_SUB_ISIS_L2",
	10: "RIB_SUB_ISIS_IA",
}
var RouteSubType_value = map[string]int32{
	"RIB_SUB_OSPF_IA":         0,
	"RIB_SUB_OSPF_NSSA_1":     1,
	"RIB_SUB_OSPF_NSSA_2":     2,
	"RIB_SUB_OSPF_EXTERNAL_1": 3,
	"RIB_SUB_OSPF_EXTERNAL_2": 4,
	"RIB_SUB_BGP_IBGP":        5,
	"RIB_SUB_BGP_EBGP":        6,
	"RIB_SUB_BGP_CONFED":      7,
	"RIB_SUB_ISIS_L1":         8,
	"RIB_SUB_ISIS_L2":         9,
	"RIB_SUB_ISIS_IA":         10,
}

func (x RouteSubType) String() string {
	return proto.EnumName(RouteSubType_name, int32(x))
}
func (RouteSubType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type Op int32

const (
	Op_NoOperation              Op = 0
	Op_InterfaceSubscribe       Op = 1
	Op_InterfaceUnsubscribe     Op = 2
	Op_RouterIdSubscribe        Op = 3
	Op_RouterIdUnsubscribe      Op = 4
	Op_RedistSubscribe          Op = 5
	Op_RedistUnsubscribe        Op = 6
	Op_RedistDefaultSubscribe   Op = 7
	Op_RedistDefaultUnsubscribe Op = 8
	Op_RouteAdd                 Op = 9
	Op_RouteDelete              Op = 10
	Op_InterfaceAdd             Op = 11
	Op_InterfaceDelete          Op = 12
	Op_InterfaceAddrAdd         Op = 13
	Op_InterfaceAddrDelete      Op = 14
	Op_InterfaceUp              Op = 15
	Op_InterfaceDown            Op = 16
	Op_InterfaceFlagChange      Op = 17
	Op_InterfaceNameChange      Op = 18
	Op_InterfaceMtuChange       Op = 19
)

var Op_name = map[int32]string{
	0:  "NoOperation",
	1:  "InterfaceSubscribe",
	2:  "InterfaceUnsubscribe",
	3:  "RouterIdSubscribe",
	4:  "RouterIdUnsubscribe",
	5:  "RedistSubscribe",
	6:  "RedistUnsubscribe",
	7:  "RedistDefaultSubscribe",
	8:  "RedistDefaultUnsubscribe",
	9:  "RouteAdd",
	10: "RouteDelete",
	11: "InterfaceAdd",
	12: "InterfaceDelete",
	13: "InterfaceAddrAdd",
	14: "InterfaceAddrDelete",
	15: "InterfaceUp",
	16: "InterfaceDown",
	17: "InterfaceFlagChange",
	18: "InterfaceNameChange",
	19: "InterfaceMtuChange",
}
var Op_value = map[string]int32{
	"NoOperation":              0,
	"InterfaceSubscribe":       1,
	"InterfaceUnsubscribe":     2,
	"RouterIdSubscribe":        3,
	"RouterIdUnsubscribe":      4,
	"RedistSubscribe":          5,
	"RedistUnsubscribe":        6,
	"RedistDefaultSubscribe":   7,
	"RedistDefaultUnsubscribe": 8,
	"RouteAdd":                 9,
	"RouteDelete":              10,
	"InterfaceAdd":             11,
	"InterfaceDelete":          12,
	"InterfaceAddrAdd":         13,
	"InterfaceAddrDelete":      14,
	"InterfaceUp":              15,
	"InterfaceDown":            16,
	"InterfaceFlagChange":      17,
	"InterfaceNameChange":      18,
	"InterfaceMtuChange":       19,
}

func (x Op) String() string {
	return proto.EnumName(Op_name, int32(x))
}
func (Op) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

type InterfaceRequest struct {
	Op    Op     `protobuf:"varint,1,opt,name=op,enum=zebra.Op" json:"op,omitempty"`
	VrfId uint32 `protobuf:"varint,2,opt,name=vrf_id,json=vrfId" json:"vrf_id,omitempty"`
}

func (m *InterfaceRequest) Reset()                    { *m = InterfaceRequest{} }
func (m *InterfaceRequest) String() string            { return proto.CompactTextString(m) }
func (*InterfaceRequest) ProtoMessage()               {}
func (*InterfaceRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *InterfaceRequest) GetOp() Op {
	if m != nil {
		return m.Op
	}
	return Op_NoOperation
}

func (m *InterfaceRequest) GetVrfId() uint32 {
	if m != nil {
		return m.VrfId
	}
	return 0
}

type InterfaceUpdate struct {
	Op       Op             `protobuf:"varint,1,opt,name=op,enum=zebra.Op" json:"op,omitempty"`
	VrfId    uint32         `protobuf:"varint,2,opt,name=vrf_id,json=vrfId" json:"vrf_id,omitempty"`
	Name     string         `protobuf:"bytes,3,opt,name=name" json:"name,omitempty"`
	Index    uint32         `protobuf:"varint,4,opt,name=index" json:"index,omitempty"`
	Mtu      uint32         `protobuf:"varint,5,opt,name=mtu" json:"mtu,omitempty"`
	Metric   uint32         `protobuf:"varint,6,opt,name=metric" json:"metric,omitempty"`
	AddrIpv4 []*AddressIPv4 `protobuf:"bytes,7,rep,name=addr_ipv4,json=addrIpv4" json:"addr_ipv4,omitempty"`
	AddrIpv6 []*AddressIPv6 `protobuf:"bytes,8,rep,name=addr_ipv6,json=addrIpv6" json:"addr_ipv6,omitempty"`
}

func (m *InterfaceUpdate) Reset()                    { *m = InterfaceUpdate{} }
func (m *InterfaceUpdate) String() string            { return proto.CompactTextString(m) }
func (*InterfaceUpdate) ProtoMessage()               {}
func (*InterfaceUpdate) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *InterfaceUpdate) GetOp() Op {
	if m != nil {
		return m.Op
	}
	return Op_NoOperation
}

func (m *InterfaceUpdate) GetVrfId() uint32 {
	if m != nil {
		return m.VrfId
	}
	return 0
}

func (m *InterfaceUpdate) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *InterfaceUpdate) GetIndex() uint32 {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *InterfaceUpdate) GetMtu() uint32 {
	if m != nil {
		return m.Mtu
	}
	return 0
}

func (m *InterfaceUpdate) GetMetric() uint32 {
	if m != nil {
		return m.Metric
	}
	return 0
}

func (m *InterfaceUpdate) GetAddrIpv4() []*AddressIPv4 {
	if m != nil {
		return m.AddrIpv4
	}
	return nil
}

func (m *InterfaceUpdate) GetAddrIpv6() []*AddressIPv6 {
	if m != nil {
		return m.AddrIpv6
	}
	return nil
}

type RouterIdRequest struct {
	Op    Op     `protobuf:"varint,1,opt,name=op,enum=zebra.Op" json:"op,omitempty"`
	VrfId uint32 `protobuf:"varint,2,opt,name=vrf_id,json=vrfId" json:"vrf_id,omitempty"`
}

func (m *RouterIdRequest) Reset()                    { *m = RouterIdRequest{} }
func (m *RouterIdRequest) String() string            { return proto.CompactTextString(m) }
func (*RouterIdRequest) ProtoMessage()               {}
func (*RouterIdRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *RouterIdRequest) GetOp() Op {
	if m != nil {
		return m.Op
	}
	return Op_NoOperation
}

func (m *RouterIdRequest) GetVrfId() uint32 {
	if m != nil {
		return m.VrfId
	}
	return 0
}

type RouterIdUpdate struct {
	VrfId    uint32 `protobuf:"varint,1,opt,name=vrf_id,json=vrfId" json:"vrf_id,omitempty"`
	RouterId *IPv4  `protobuf:"bytes,2,opt,name=router_id,json=routerId" json:"router_id,omitempty"`
}

func (m *RouterIdUpdate) Reset()                    { *m = RouterIdUpdate{} }
func (m *RouterIdUpdate) String() string            { return proto.CompactTextString(m) }
func (*RouterIdUpdate) ProtoMessage()               {}
func (*RouterIdUpdate) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *RouterIdUpdate) GetVrfId() uint32 {
	if m != nil {
		return m.VrfId
	}
	return 0
}

func (m *RouterIdUpdate) GetRouterId() *IPv4 {
	if m != nil {
		return m.RouterId
	}
	return nil
}

type RedistributeIPv4Request struct {
	Op        Op        `protobuf:"varint,1,opt,name=op,enum=zebra.Op" json:"op,omitempty"`
	VrfId     uint32    `protobuf:"varint,2,opt,name=vrf_id,json=vrfId" json:"vrf_id,omitempty"`
	RouteType RouteType `protobuf:"varint,4,opt,name=route_type,json=routeType,enum=zebra.RouteType" json:"route_type,omitempty"`
}

func (m *RedistributeIPv4Request) Reset()                    { *m = RedistributeIPv4Request{} }
func (m *RedistributeIPv4Request) String() string            { return proto.CompactTextString(m) }
func (*RedistributeIPv4Request) ProtoMessage()               {}
func (*RedistributeIPv4Request) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *RedistributeIPv4Request) GetOp() Op {
	if m != nil {
		return m.Op
	}
	return Op_NoOperation
}

func (m *RedistributeIPv4Request) GetVrfId() uint32 {
	if m != nil {
		return m.VrfId
	}
	return 0
}

func (m *RedistributeIPv4Request) GetRouteType() RouteType {
	if m != nil {
		return m.RouteType
	}
	return RouteType_RIB_UNKNOWN
}

type RedistributeIPv6Request struct {
	Op        Op        `protobuf:"varint,1,opt,name=op,enum=zebra.Op" json:"op,omitempty"`
	VrfId     uint32    `protobuf:"varint,2,opt,name=vrf_id,json=vrfId" json:"vrf_id,omitempty"`
	RouteType RouteType `protobuf:"varint,4,opt,name=route_type,json=routeType,enum=zebra.RouteType" json:"route_type,omitempty"`
}

func (m *RedistributeIPv6Request) Reset()                    { *m = RedistributeIPv6Request{} }
func (m *RedistributeIPv6Request) String() string            { return proto.CompactTextString(m) }
func (*RedistributeIPv6Request) ProtoMessage()               {}
func (*RedistributeIPv6Request) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *RedistributeIPv6Request) GetOp() Op {
	if m != nil {
		return m.Op
	}
	return Op_NoOperation
}

func (m *RedistributeIPv6Request) GetVrfId() uint32 {
	if m != nil {
		return m.VrfId
	}
	return 0
}

func (m *RedistributeIPv6Request) GetRouteType() RouteType {
	if m != nil {
		return m.RouteType
	}
	return RouteType_RIB_UNKNOWN
}

type IPv4 struct {
	SAddr uint32 `protobuf:"varint,1,opt,name=s_addr,json=sAddr" json:"s_addr,omitempty"`
}

func (m *IPv4) Reset()                    { *m = IPv4{} }
func (m *IPv4) String() string            { return proto.CompactTextString(m) }
func (*IPv4) ProtoMessage()               {}
func (*IPv4) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *IPv4) GetSAddr() uint32 {
	if m != nil {
		return m.SAddr
	}
	return 0
}

type PrefixIPv4 struct {
	Addr   []byte `protobuf:"bytes,1,opt,name=addr,proto3" json:"addr,omitempty"`
	Length uint32 `protobuf:"varint,2,opt,name=length" json:"length,omitempty"`
}

func (m *PrefixIPv4) Reset()                    { *m = PrefixIPv4{} }
func (m *PrefixIPv4) String() string            { return proto.CompactTextString(m) }
func (*PrefixIPv4) ProtoMessage()               {}
func (*PrefixIPv4) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *PrefixIPv4) GetAddr() []byte {
	if m != nil {
		return m.Addr
	}
	return nil
}

func (m *PrefixIPv4) GetLength() uint32 {
	if m != nil {
		return m.Length
	}
	return 0
}

type NexthopIPv4 struct {
	Addr    []byte `protobuf:"bytes,1,opt,name=addr,proto3" json:"addr,omitempty"`
	Ifindex uint32 `protobuf:"varint,2,opt,name=ifindex" json:"ifindex,omitempty"`
}

func (m *NexthopIPv4) Reset()                    { *m = NexthopIPv4{} }
func (m *NexthopIPv4) String() string            { return proto.CompactTextString(m) }
func (*NexthopIPv4) ProtoMessage()               {}
func (*NexthopIPv4) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *NexthopIPv4) GetAddr() []byte {
	if m != nil {
		return m.Addr
	}
	return nil
}

func (m *NexthopIPv4) GetIfindex() uint32 {
	if m != nil {
		return m.Ifindex
	}
	return 0
}

type AddressIPv4 struct {
	Addr  *PrefixIPv4 `protobuf:"bytes,1,opt,name=addr" json:"addr,omitempty"`
	Flags uint32      `protobuf:"varint,2,opt,name=flags" json:"flags,omitempty"`
}

func (m *AddressIPv4) Reset()                    { *m = AddressIPv4{} }
func (m *AddressIPv4) String() string            { return proto.CompactTextString(m) }
func (*AddressIPv4) ProtoMessage()               {}
func (*AddressIPv4) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *AddressIPv4) GetAddr() *PrefixIPv4 {
	if m != nil {
		return m.Addr
	}
	return nil
}

func (m *AddressIPv4) GetFlags() uint32 {
	if m != nil {
		return m.Flags
	}
	return 0
}

type PrefixIPv6 struct {
	Addr   []byte `protobuf:"bytes,1,opt,name=addr,proto3" json:"addr,omitempty"`
	Length uint32 `protobuf:"varint,2,opt,name=length" json:"length,omitempty"`
}

func (m *PrefixIPv6) Reset()                    { *m = PrefixIPv6{} }
func (m *PrefixIPv6) String() string            { return proto.CompactTextString(m) }
func (*PrefixIPv6) ProtoMessage()               {}
func (*PrefixIPv6) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *PrefixIPv6) GetAddr() []byte {
	if m != nil {
		return m.Addr
	}
	return nil
}

func (m *PrefixIPv6) GetLength() uint32 {
	if m != nil {
		return m.Length
	}
	return 0
}

type NexthopIPv6 struct {
	Addr    []byte `protobuf:"bytes,1,opt,name=addr,proto3" json:"addr,omitempty"`
	Ifindex uint32 `protobuf:"varint,2,opt,name=ifindex" json:"ifindex,omitempty"`
}

func (m *NexthopIPv6) Reset()                    { *m = NexthopIPv6{} }
func (m *NexthopIPv6) String() string            { return proto.CompactTextString(m) }
func (*NexthopIPv6) ProtoMessage()               {}
func (*NexthopIPv6) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *NexthopIPv6) GetAddr() []byte {
	if m != nil {
		return m.Addr
	}
	return nil
}

func (m *NexthopIPv6) GetIfindex() uint32 {
	if m != nil {
		return m.Ifindex
	}
	return 0
}

type AddressIPv6 struct {
	Addr  *PrefixIPv6 `protobuf:"bytes,1,opt,name=addr" json:"addr,omitempty"`
	Flags uint32      `protobuf:"varint,2,opt,name=flags" json:"flags,omitempty"`
}

func (m *AddressIPv6) Reset()                    { *m = AddressIPv6{} }
func (m *AddressIPv6) String() string            { return proto.CompactTextString(m) }
func (*AddressIPv6) ProtoMessage()               {}
func (*AddressIPv6) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *AddressIPv6) GetAddr() *PrefixIPv6 {
	if m != nil {
		return m.Addr
	}
	return nil
}

func (m *AddressIPv6) GetFlags() uint32 {
	if m != nil {
		return m.Flags
	}
	return 0
}

type RouteIPv4 struct {
	Op       Op             `protobuf:"varint,1,opt,name=op,enum=zebra.Op" json:"op,omitempty"`
	VrfId    uint32         `protobuf:"varint,2,opt,name=vrf_id,json=vrfId" json:"vrf_id,omitempty"`
	Type     RouteType      `protobuf:"varint,3,opt,name=type,enum=zebra.RouteType" json:"type,omitempty"`
	SubType  RouteSubType   `protobuf:"varint,4,opt,name=sub_type,json=subType,enum=zebra.RouteSubType" json:"sub_type,omitempty"`
	Prefix   *PrefixIPv4    `protobuf:"bytes,5,opt,name=prefix" json:"prefix,omitempty"`
	Distance uint32         `protobuf:"varint,6,opt,name=distance" json:"distance,omitempty"`
	Metric   uint32         `protobuf:"varint,7,opt,name=metric" json:"metric,omitempty"`
	Tag      uint32         `protobuf:"varint,8,opt,name=tag" json:"tag,omitempty"`
	Color    []string       `protobuf:"bytes,9,rep,name=color" json:"color,omitempty"`
	Nexthops []*NexthopIPv4 `protobuf:"bytes,10,rep,name=nexthops" json:"nexthops,omitempty"`
}

func (m *RouteIPv4) Reset()                    { *m = RouteIPv4{} }
func (m *RouteIPv4) String() string            { return proto.CompactTextString(m) }
func (*RouteIPv4) ProtoMessage()               {}
func (*RouteIPv4) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *RouteIPv4) GetOp() Op {
	if m != nil {
		return m.Op
	}
	return Op_NoOperation
}

func (m *RouteIPv4) GetVrfId() uint32 {
	if m != nil {
		return m.VrfId
	}
	return 0
}

func (m *RouteIPv4) GetType() RouteType {
	if m != nil {
		return m.Type
	}
	return RouteType_RIB_UNKNOWN
}

func (m *RouteIPv4) GetSubType() RouteSubType {
	if m != nil {
		return m.SubType
	}
	return RouteSubType_RIB_SUB_OSPF_IA
}

func (m *RouteIPv4) GetPrefix() *PrefixIPv4 {
	if m != nil {
		return m.Prefix
	}
	return nil
}

func (m *RouteIPv4) GetDistance() uint32 {
	if m != nil {
		return m.Distance
	}
	return 0
}

func (m *RouteIPv4) GetMetric() uint32 {
	if m != nil {
		return m.Metric
	}
	return 0
}

func (m *RouteIPv4) GetTag() uint32 {
	if m != nil {
		return m.Tag
	}
	return 0
}

func (m *RouteIPv4) GetColor() []string {
	if m != nil {
		return m.Color
	}
	return nil
}

func (m *RouteIPv4) GetNexthops() []*NexthopIPv4 {
	if m != nil {
		return m.Nexthops
	}
	return nil
}

type RouteIPv6 struct {
	Op       Op             `protobuf:"varint,1,opt,name=op,enum=zebra.Op" json:"op,omitempty"`
	VrfId    uint32         `protobuf:"varint,2,opt,name=vrf_id,json=vrfId" json:"vrf_id,omitempty"`
	Type     RouteType      `protobuf:"varint,3,opt,name=type,enum=zebra.RouteType" json:"type,omitempty"`
	SubType  RouteSubType   `protobuf:"varint,4,opt,name=sub_type,json=subType,enum=zebra.RouteSubType" json:"sub_type,omitempty"`
	Prefix   *PrefixIPv6    `protobuf:"bytes,5,opt,name=prefix" json:"prefix,omitempty"`
	Distance uint32         `protobuf:"varint,6,opt,name=distance" json:"distance,omitempty"`
	Metric   uint32         `protobuf:"varint,7,opt,name=metric" json:"metric,omitempty"`
	Tag      uint32         `protobuf:"varint,8,opt,name=tag" json:"tag,omitempty"`
	Color    []string       `protobuf:"bytes,9,rep,name=color" json:"color,omitempty"`
	Nexthops []*NexthopIPv6 `protobuf:"bytes,10,rep,name=nexthops" json:"nexthops,omitempty"`
}

func (m *RouteIPv6) Reset()                    { *m = RouteIPv6{} }
func (m *RouteIPv6) String() string            { return proto.CompactTextString(m) }
func (*RouteIPv6) ProtoMessage()               {}
func (*RouteIPv6) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

func (m *RouteIPv6) GetOp() Op {
	if m != nil {
		return m.Op
	}
	return Op_NoOperation
}

func (m *RouteIPv6) GetVrfId() uint32 {
	if m != nil {
		return m.VrfId
	}
	return 0
}

func (m *RouteIPv6) GetType() RouteType {
	if m != nil {
		return m.Type
	}
	return RouteType_RIB_UNKNOWN
}

func (m *RouteIPv6) GetSubType() RouteSubType {
	if m != nil {
		return m.SubType
	}
	return RouteSubType_RIB_SUB_OSPF_IA
}

func (m *RouteIPv6) GetPrefix() *PrefixIPv6 {
	if m != nil {
		return m.Prefix
	}
	return nil
}

func (m *RouteIPv6) GetDistance() uint32 {
	if m != nil {
		return m.Distance
	}
	return 0
}

func (m *RouteIPv6) GetMetric() uint32 {
	if m != nil {
		return m.Metric
	}
	return 0
}

func (m *RouteIPv6) GetTag() uint32 {
	if m != nil {
		return m.Tag
	}
	return 0
}

func (m *RouteIPv6) GetColor() []string {
	if m != nil {
		return m.Color
	}
	return nil
}

func (m *RouteIPv6) GetNexthops() []*NexthopIPv6 {
	if m != nil {
		return m.Nexthops
	}
	return nil
}

func init() {
	proto.RegisterType((*InterfaceRequest)(nil), "zebra.InterfaceRequest")
	proto.RegisterType((*InterfaceUpdate)(nil), "zebra.InterfaceUpdate")
	proto.RegisterType((*RouterIdRequest)(nil), "zebra.RouterIdRequest")
	proto.RegisterType((*RouterIdUpdate)(nil), "zebra.RouterIdUpdate")
	proto.RegisterType((*RedistributeIPv4Request)(nil), "zebra.RedistributeIPv4Request")
	proto.RegisterType((*RedistributeIPv6Request)(nil), "zebra.RedistributeIPv6Request")
	proto.RegisterType((*IPv4)(nil), "zebra.IPv4")
	proto.RegisterType((*PrefixIPv4)(nil), "zebra.PrefixIPv4")
	proto.RegisterType((*NexthopIPv4)(nil), "zebra.NexthopIPv4")
	proto.RegisterType((*AddressIPv4)(nil), "zebra.AddressIPv4")
	proto.RegisterType((*PrefixIPv6)(nil), "zebra.PrefixIPv6")
	proto.RegisterType((*NexthopIPv6)(nil), "zebra.NexthopIPv6")
	proto.RegisterType((*AddressIPv6)(nil), "zebra.AddressIPv6")
	proto.RegisterType((*RouteIPv4)(nil), "zebra.RouteIPv4")
	proto.RegisterType((*RouteIPv6)(nil), "zebra.RouteIPv6")
	proto.RegisterEnum("zebra.RouteType", RouteType_name, RouteType_value)
	proto.RegisterEnum("zebra.RouteSubType", RouteSubType_name, RouteSubType_value)
	proto.RegisterEnum("zebra.Op", Op_name, Op_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Zebra service

type ZebraClient interface {
	InterfaceService(ctx context.Context, opts ...grpc.CallOption) (Zebra_InterfaceServiceClient, error)
	RouterIdService(ctx context.Context, opts ...grpc.CallOption) (Zebra_RouterIdServiceClient, error)
	RedistributeIPv4Service(ctx context.Context, opts ...grpc.CallOption) (Zebra_RedistributeIPv4ServiceClient, error)
	RedistributeIPv6Service(ctx context.Context, opts ...grpc.CallOption) (Zebra_RedistributeIPv6ServiceClient, error)
	RouteIPv4Service(ctx context.Context, opts ...grpc.CallOption) (Zebra_RouteIPv4ServiceClient, error)
	RouteIPv6Service(ctx context.Context, opts ...grpc.CallOption) (Zebra_RouteIPv6ServiceClient, error)
}

type zebraClient struct {
	cc *grpc.ClientConn
}

func NewZebraClient(cc *grpc.ClientConn) ZebraClient {
	return &zebraClient{cc}
}

func (c *zebraClient) InterfaceService(ctx context.Context, opts ...grpc.CallOption) (Zebra_InterfaceServiceClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Zebra_serviceDesc.Streams[0], c.cc, "/zebra.Zebra/InterfaceService", opts...)
	if err != nil {
		return nil, err
	}
	x := &zebraInterfaceServiceClient{stream}
	return x, nil
}

type Zebra_InterfaceServiceClient interface {
	Send(*InterfaceRequest) error
	Recv() (*InterfaceUpdate, error)
	grpc.ClientStream
}

type zebraInterfaceServiceClient struct {
	grpc.ClientStream
}

func (x *zebraInterfaceServiceClient) Send(m *InterfaceRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *zebraInterfaceServiceClient) Recv() (*InterfaceUpdate, error) {
	m := new(InterfaceUpdate)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *zebraClient) RouterIdService(ctx context.Context, opts ...grpc.CallOption) (Zebra_RouterIdServiceClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Zebra_serviceDesc.Streams[1], c.cc, "/zebra.Zebra/RouterIdService", opts...)
	if err != nil {
		return nil, err
	}
	x := &zebraRouterIdServiceClient{stream}
	return x, nil
}

type Zebra_RouterIdServiceClient interface {
	Send(*RouterIdRequest) error
	Recv() (*RouterIdUpdate, error)
	grpc.ClientStream
}

type zebraRouterIdServiceClient struct {
	grpc.ClientStream
}

func (x *zebraRouterIdServiceClient) Send(m *RouterIdRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *zebraRouterIdServiceClient) Recv() (*RouterIdUpdate, error) {
	m := new(RouterIdUpdate)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *zebraClient) RedistributeIPv4Service(ctx context.Context, opts ...grpc.CallOption) (Zebra_RedistributeIPv4ServiceClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Zebra_serviceDesc.Streams[2], c.cc, "/zebra.Zebra/RedistributeIPv4Service", opts...)
	if err != nil {
		return nil, err
	}
	x := &zebraRedistributeIPv4ServiceClient{stream}
	return x, nil
}

type Zebra_RedistributeIPv4ServiceClient interface {
	Send(*RedistributeIPv4Request) error
	Recv() (*RouteIPv4, error)
	grpc.ClientStream
}

type zebraRedistributeIPv4ServiceClient struct {
	grpc.ClientStream
}

func (x *zebraRedistributeIPv4ServiceClient) Send(m *RedistributeIPv4Request) error {
	return x.ClientStream.SendMsg(m)
}

func (x *zebraRedistributeIPv4ServiceClient) Recv() (*RouteIPv4, error) {
	m := new(RouteIPv4)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *zebraClient) RedistributeIPv6Service(ctx context.Context, opts ...grpc.CallOption) (Zebra_RedistributeIPv6ServiceClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Zebra_serviceDesc.Streams[3], c.cc, "/zebra.Zebra/RedistributeIPv6Service", opts...)
	if err != nil {
		return nil, err
	}
	x := &zebraRedistributeIPv6ServiceClient{stream}
	return x, nil
}

type Zebra_RedistributeIPv6ServiceClient interface {
	Send(*RedistributeIPv6Request) error
	Recv() (*RouteIPv6, error)
	grpc.ClientStream
}

type zebraRedistributeIPv6ServiceClient struct {
	grpc.ClientStream
}

func (x *zebraRedistributeIPv6ServiceClient) Send(m *RedistributeIPv6Request) error {
	return x.ClientStream.SendMsg(m)
}

func (x *zebraRedistributeIPv6ServiceClient) Recv() (*RouteIPv6, error) {
	m := new(RouteIPv6)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *zebraClient) RouteIPv4Service(ctx context.Context, opts ...grpc.CallOption) (Zebra_RouteIPv4ServiceClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Zebra_serviceDesc.Streams[4], c.cc, "/zebra.Zebra/RouteIPv4Service", opts...)
	if err != nil {
		return nil, err
	}
	x := &zebraRouteIPv4ServiceClient{stream}
	return x, nil
}

type Zebra_RouteIPv4ServiceClient interface {
	Send(*RouteIPv4) error
	Recv() (*RouteIPv4, error)
	grpc.ClientStream
}

type zebraRouteIPv4ServiceClient struct {
	grpc.ClientStream
}

func (x *zebraRouteIPv4ServiceClient) Send(m *RouteIPv4) error {
	return x.ClientStream.SendMsg(m)
}

func (x *zebraRouteIPv4ServiceClient) Recv() (*RouteIPv4, error) {
	m := new(RouteIPv4)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *zebraClient) RouteIPv6Service(ctx context.Context, opts ...grpc.CallOption) (Zebra_RouteIPv6ServiceClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Zebra_serviceDesc.Streams[5], c.cc, "/zebra.Zebra/RouteIPv6Service", opts...)
	if err != nil {
		return nil, err
	}
	x := &zebraRouteIPv6ServiceClient{stream}
	return x, nil
}

type Zebra_RouteIPv6ServiceClient interface {
	Send(*RouteIPv6) error
	Recv() (*RouteIPv6, error)
	grpc.ClientStream
}

type zebraRouteIPv6ServiceClient struct {
	grpc.ClientStream
}

func (x *zebraRouteIPv6ServiceClient) Send(m *RouteIPv6) error {
	return x.ClientStream.SendMsg(m)
}

func (x *zebraRouteIPv6ServiceClient) Recv() (*RouteIPv6, error) {
	m := new(RouteIPv6)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for Zebra service

type ZebraServer interface {
	InterfaceService(Zebra_InterfaceServiceServer) error
	RouterIdService(Zebra_RouterIdServiceServer) error
	RedistributeIPv4Service(Zebra_RedistributeIPv4ServiceServer) error
	RedistributeIPv6Service(Zebra_RedistributeIPv6ServiceServer) error
	RouteIPv4Service(Zebra_RouteIPv4ServiceServer) error
	RouteIPv6Service(Zebra_RouteIPv6ServiceServer) error
}

func RegisterZebraServer(s *grpc.Server, srv ZebraServer) {
	s.RegisterService(&_Zebra_serviceDesc, srv)
}

func _Zebra_InterfaceService_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ZebraServer).InterfaceService(&zebraInterfaceServiceServer{stream})
}

type Zebra_InterfaceServiceServer interface {
	Send(*InterfaceUpdate) error
	Recv() (*InterfaceRequest, error)
	grpc.ServerStream
}

type zebraInterfaceServiceServer struct {
	grpc.ServerStream
}

func (x *zebraInterfaceServiceServer) Send(m *InterfaceUpdate) error {
	return x.ServerStream.SendMsg(m)
}

func (x *zebraInterfaceServiceServer) Recv() (*InterfaceRequest, error) {
	m := new(InterfaceRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Zebra_RouterIdService_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ZebraServer).RouterIdService(&zebraRouterIdServiceServer{stream})
}

type Zebra_RouterIdServiceServer interface {
	Send(*RouterIdUpdate) error
	Recv() (*RouterIdRequest, error)
	grpc.ServerStream
}

type zebraRouterIdServiceServer struct {
	grpc.ServerStream
}

func (x *zebraRouterIdServiceServer) Send(m *RouterIdUpdate) error {
	return x.ServerStream.SendMsg(m)
}

func (x *zebraRouterIdServiceServer) Recv() (*RouterIdRequest, error) {
	m := new(RouterIdRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Zebra_RedistributeIPv4Service_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ZebraServer).RedistributeIPv4Service(&zebraRedistributeIPv4ServiceServer{stream})
}

type Zebra_RedistributeIPv4ServiceServer interface {
	Send(*RouteIPv4) error
	Recv() (*RedistributeIPv4Request, error)
	grpc.ServerStream
}

type zebraRedistributeIPv4ServiceServer struct {
	grpc.ServerStream
}

func (x *zebraRedistributeIPv4ServiceServer) Send(m *RouteIPv4) error {
	return x.ServerStream.SendMsg(m)
}

func (x *zebraRedistributeIPv4ServiceServer) Recv() (*RedistributeIPv4Request, error) {
	m := new(RedistributeIPv4Request)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Zebra_RedistributeIPv6Service_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ZebraServer).RedistributeIPv6Service(&zebraRedistributeIPv6ServiceServer{stream})
}

type Zebra_RedistributeIPv6ServiceServer interface {
	Send(*RouteIPv6) error
	Recv() (*RedistributeIPv6Request, error)
	grpc.ServerStream
}

type zebraRedistributeIPv6ServiceServer struct {
	grpc.ServerStream
}

func (x *zebraRedistributeIPv6ServiceServer) Send(m *RouteIPv6) error {
	return x.ServerStream.SendMsg(m)
}

func (x *zebraRedistributeIPv6ServiceServer) Recv() (*RedistributeIPv6Request, error) {
	m := new(RedistributeIPv6Request)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Zebra_RouteIPv4Service_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ZebraServer).RouteIPv4Service(&zebraRouteIPv4ServiceServer{stream})
}

type Zebra_RouteIPv4ServiceServer interface {
	Send(*RouteIPv4) error
	Recv() (*RouteIPv4, error)
	grpc.ServerStream
}

type zebraRouteIPv4ServiceServer struct {
	grpc.ServerStream
}

func (x *zebraRouteIPv4ServiceServer) Send(m *RouteIPv4) error {
	return x.ServerStream.SendMsg(m)
}

func (x *zebraRouteIPv4ServiceServer) Recv() (*RouteIPv4, error) {
	m := new(RouteIPv4)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Zebra_RouteIPv6Service_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ZebraServer).RouteIPv6Service(&zebraRouteIPv6ServiceServer{stream})
}

type Zebra_RouteIPv6ServiceServer interface {
	Send(*RouteIPv6) error
	Recv() (*RouteIPv6, error)
	grpc.ServerStream
}

type zebraRouteIPv6ServiceServer struct {
	grpc.ServerStream
}

func (x *zebraRouteIPv6ServiceServer) Send(m *RouteIPv6) error {
	return x.ServerStream.SendMsg(m)
}

func (x *zebraRouteIPv6ServiceServer) Recv() (*RouteIPv6, error) {
	m := new(RouteIPv6)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _Zebra_serviceDesc = grpc.ServiceDesc{
	ServiceName: "zebra.Zebra",
	HandlerType: (*ZebraServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "InterfaceService",
			Handler:       _Zebra_InterfaceService_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "RouterIdService",
			Handler:       _Zebra_RouterIdService_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "RedistributeIPv4Service",
			Handler:       _Zebra_RedistributeIPv4Service_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "RedistributeIPv6Service",
			Handler:       _Zebra_RedistributeIPv6Service_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "RouteIPv4Service",
			Handler:       _Zebra_RouteIPv4Service_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "RouteIPv6Service",
			Handler:       _Zebra_RouteIPv6Service_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "zebra.proto",
}

func init() { proto.RegisterFile("zebra.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 1041 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xd4, 0x57, 0x5b, 0x6f, 0xe3, 0x44,
	0x14, 0xae, 0xe3, 0x5c, 0x8f, 0xdb, 0x66, 0x3a, 0x6d, 0x53, 0x13, 0x2e, 0x8a, 0x22, 0x90, 0x42,
	0x1f, 0xba, 0x34, 0x54, 0x16, 0x12, 0xbc, 0xa4, 0x49, 0xba, 0x32, 0xec, 0x3a, 0x59, 0x3b, 0x15,
	0x97, 0x17, 0xcb, 0x89, 0x27, 0xa9, 0xa5, 0xd4, 0x36, 0xb6, 0x13, 0xba, 0x88, 0x57, 0xfe, 0x00,
	0xbf, 0x87, 0x07, 0x9e, 0xf9, 0x47, 0xbc, 0xa1, 0x19, 0x5f, 0x32, 0x6e, 0x1b, 0x56, 0x5b, 0x24,
	0xc4, 0xbe, 0xcd, 0x39, 0xe7, 0x3b, 0xdf, 0x9c, 0x5b, 0xc6, 0x27, 0x20, 0xfd, 0x4c, 0xa6, 0x81,
	0x75, 0xe6, 0x07, 0x5e, 0xe4, 0xe1, 0x12, 0x13, 0xda, 0x03, 0x40, 0xaa, 0x1b, 0x91, 0x60, 0x6e,
	0xcd, 0x88, 0x4e, 0x7e, 0x5c, 0x91, 0x30, 0xc2, 0xef, 0x41, 0xc1, 0xf3, 0x65, 0xa1, 0x25, 0x74,
	0xf6, 0xbb, 0xb5, 0xb3, 0xd8, 0x69, 0xe4, 0xeb, 0x05, 0xcf, 0xc7, 0xc7, 0x50, 0x5e, 0x07, 0x73,
	0xd3, 0xb1, 0xe5, 0x42, 0x4b, 0xe8, 0xec, 0xe9, 0xa5, 0x75, 0x30, 0x57, 0xed, 0xf6, 0x5f, 0x02,
	0xd4, 0x33, 0x9a, 0x6b, 0xdf, 0xb6, 0x22, 0xf2, 0xf6, 0x2c, 0x18, 0x43, 0xd1, 0xb5, 0x6e, 0x89,
	0x2c, 0xb6, 0x84, 0x4e, 0x4d, 0x67, 0x67, 0x7c, 0x04, 0x25, 0xc7, 0xb5, 0xc9, 0x9d, 0x5c, 0x8c,
	0x91, 0x4c, 0xc0, 0x08, 0xc4, 0xdb, 0x68, 0x25, 0x97, 0x98, 0x8e, 0x1e, 0x71, 0x03, 0xca, 0xb7,
	0x24, 0x0a, 0x9c, 0x99, 0x5c, 0x66, 0xca, 0x44, 0xc2, 0xcf, 0xa0, 0x66, 0xd9, 0x76, 0x60, 0x3a,
	0xfe, 0xfa, 0x42, 0xae, 0xb4, 0xc4, 0x8e, 0xd4, 0xc5, 0x49, 0x30, 0x3d, 0xdb, 0x0e, 0x48, 0x18,
	0xaa, 0xe3, 0xf5, 0x85, 0x5e, 0xa5, 0x20, 0xd5, 0x5f, 0x5f, 0xf0, 0x0e, 0x8a, 0x5c, 0xdd, 0xe2,
	0xa0, 0x64, 0x0e, 0x4a, 0xbb, 0x0f, 0x75, 0xdd, 0x5b, 0x45, 0x24, 0x50, 0xed, 0xa7, 0x17, 0xf0,
	0x15, 0xec, 0xa7, 0x24, 0x49, 0xf9, 0x36, 0x40, 0x81, 0xaf, 0x51, 0x07, 0x6a, 0x01, 0x03, 0xa6,
	0x14, 0x52, 0x57, 0x4a, 0x6e, 0x88, 0x13, 0x09, 0x12, 0x9a, 0xf6, 0x2f, 0x70, 0xa2, 0x13, 0xdb,
	0x09, 0xa3, 0xc0, 0x99, 0xae, 0x22, 0xc2, 0xac, 0x4f, 0x8d, 0x0f, 0x3f, 0x03, 0x60, 0xc4, 0x66,
	0xf4, 0xda, 0x27, 0xac, 0x17, 0xfb, 0x5d, 0x94, 0x78, 0xb2, 0xc0, 0x27, 0xaf, 0x7d, 0xa2, 0xc7,
	0xa1, 0xd1, 0xe3, 0x23, 0xb7, 0x2b, 0xff, 0xe1, 0xed, 0x1f, 0x42, 0x91, 0xe6, 0x4b, 0xf9, 0x42,
	0x93, 0x76, 0x2a, 0x2d, 0x62, 0x48, 0x7b, 0xd8, 0xfe, 0x02, 0x60, 0x1c, 0x90, 0xb9, 0x73, 0xc7,
	0x40, 0x18, 0x8a, 0x19, 0x64, 0x57, 0x67, 0x67, 0x3a, 0x4e, 0x4b, 0xe2, 0x2e, 0xa2, 0x9b, 0x24,
	0x90, 0x44, 0x6a, 0x7f, 0x09, 0x92, 0x46, 0xee, 0xa2, 0x1b, 0xcf, 0xdf, 0xea, 0x2a, 0x43, 0xc5,
	0x99, 0xc7, 0x33, 0x1b, 0xfb, 0xa6, 0x62, 0xfb, 0x6b, 0x90, 0xb8, 0x99, 0xc3, 0x9f, 0x70, 0xce,
	0x52, 0xf7, 0x20, 0xc9, 0x67, 0x13, 0x58, 0xc2, 0x77, 0x04, 0xa5, 0xf9, 0xd2, 0x5a, 0x84, 0x69,
	0x49, 0x98, 0x90, 0x4b, 0x41, 0x79, 0x7a, 0x0a, 0xca, 0xbf, 0x49, 0x41, 0x79, 0x53, 0x0a, 0xca,
	0x3f, 0xa6, 0xf0, 0x67, 0x01, 0x6a, 0xac, 0x7b, 0xac, 0x1a, 0x6f, 0x3f, 0x15, 0x1f, 0x43, 0x91,
	0xcd, 0x83, 0xb8, 0x65, 0x1e, 0x98, 0x15, 0x9f, 0x41, 0x35, 0x5c, 0x4d, 0xf9, 0xc9, 0x39, 0xe4,
	0x91, 0xc6, 0x6a, 0xca, 0xc0, 0x95, 0x30, 0x3e, 0xe0, 0x4f, 0xa1, 0xec, 0xb3, 0xf8, 0xd9, 0xeb,
	0xf2, 0x68, 0x5f, 0x12, 0x00, 0x6e, 0x42, 0x95, 0x4e, 0xb8, 0xe5, 0xce, 0x48, 0xf2, 0xea, 0x64,
	0x32, 0xf7, 0x1e, 0x55, 0x72, 0xef, 0x11, 0x02, 0x31, 0xb2, 0x16, 0x72, 0x35, 0x7e, 0xb9, 0x22,
	0x6b, 0x41, 0x8b, 0x33, 0xf3, 0x96, 0x5e, 0x20, 0xd7, 0x5a, 0x62, 0xa7, 0xa6, 0xc7, 0x02, 0x0d,
	0xdb, 0x8d, 0xbb, 0x14, 0xca, 0x90, 0x7b, 0x85, 0xb8, 0xf9, 0xd3, 0x33, 0x4c, 0xae, 0x98, 0xca,
	0xbb, 0x53, 0x4c, 0xe5, 0x7f, 0x53, 0x4c, 0x65, 0x53, 0xcc, 0xd3, 0x5f, 0x85, 0xa4, 0x98, 0x2c,
	0x89, 0x3a, 0x48, 0xba, 0x7a, 0x69, 0x5e, 0x6b, 0xdf, 0x68, 0xa3, 0x6f, 0x35, 0xb4, 0x83, 0xf7,
	0x01, 0xa8, 0xc2, 0xf8, 0xde, 0x98, 0x0c, 0x5f, 0x22, 0x01, 0x1f, 0xc0, 0x1e, 0x95, 0xfb, 0x23,
	0x4d, 0x1b, 0xf6, 0x27, 0xc3, 0x01, 0x2a, 0x64, 0x90, 0x49, 0x6f, 0xa2, 0xf6, 0x91, 0x88, 0x25,
	0xa8, 0x50, 0x59, 0x57, 0xc7, 0xa8, 0x88, 0x77, 0xa1, 0x4a, 0x85, 0x91, 0x31, 0xbe, 0x42, 0xa5,
	0x54, 0x52, 0x0d, 0xd5, 0x40, 0xe5, 0x14, 0x78, 0xf9, 0x7c, 0x8c, 0x2a, 0xa7, 0xbf, 0x15, 0x60,
	0x97, 0x2f, 0x2c, 0x3e, 0x84, 0x3a, 0xa3, 0xbd, 0x8e, 0xbd, 0x4d, 0xb5, 0x87, 0x76, 0xf0, 0x09,
	0x1c, 0xe6, 0x94, 0x9a, 0x61, 0xf4, 0xcc, 0x73, 0x24, 0x3c, 0x6e, 0xe8, 0xa2, 0x02, 0x7e, 0x1f,
	0x4e, 0x72, 0x86, 0xe1, 0x77, 0x93, 0xa1, 0xae, 0xf5, 0x5e, 0x98, 0xe7, 0x48, 0xdc, 0x6e, 0xec,
	0xa2, 0x22, 0x3e, 0x02, 0x94, 0x1a, 0x2f, 0x9f, 0x8f, 0x4d, 0x95, 0xc6, 0x59, 0xba, 0xaf, 0x1d,
	0x52, 0x6d, 0x19, 0x37, 0x00, 0xf3, 0xda, 0xfe, 0x48, 0xbb, 0x1a, 0x0e, 0x50, 0x85, 0x4f, 0x82,
	0x26, 0x6d, 0xbe, 0x38, 0x47, 0xd5, 0x87, 0xca, 0x2e, 0xaa, 0x3d, 0x50, 0xaa, 0x3d, 0x04, 0xa7,
	0x7f, 0x88, 0x50, 0x18, 0xf9, 0xb4, 0x2b, 0x9a, 0x37, 0xf2, 0x49, 0x60, 0x45, 0x8e, 0xe7, 0xa2,
	0x1d, 0x7a, 0x5d, 0xb6, 0x82, 0x18, 0xab, 0x69, 0x38, 0x0b, 0x9c, 0x29, 0x41, 0x02, 0x96, 0xe1,
	0x68, 0xb3, 0x9a, 0xb8, 0x61, 0x66, 0x29, 0xe0, 0x63, 0x38, 0x48, 0x3f, 0xba, 0x1b, 0x07, 0x91,
	0x95, 0x2d, 0xfd, 0x16, 0x73, 0xf8, 0x22, 0x0b, 0x87, 0x7d, 0xd3, 0x36, 0xe8, 0x12, 0x23, 0x61,
	0x4a, 0x1e, 0x5b, 0xc6, 0x4d, 0x68, 0xc4, 0xea, 0x01, 0x99, 0x5b, 0xab, 0x25, 0xe7, 0x52, 0xc1,
	0x1f, 0x80, 0x9c, 0xb3, 0xf1, 0x9e, 0x55, 0x36, 0x0f, 0xf4, 0xfa, 0x9e, 0x6d, 0xa3, 0x1a, 0x1b,
	0x3e, 0x2a, 0x0d, 0xc8, 0x92, 0x44, 0x04, 0x01, 0x46, 0xb0, 0x9b, 0xa5, 0x43, 0x21, 0x12, 0x0d,
	0x2b, 0xd3, 0x24, 0xb0, 0x5d, 0xda, 0x12, 0x1e, 0x16, 0x50, 0xe8, 0x1e, 0x4d, 0x2d, 0xa7, 0x4d,
	0xe0, 0xfb, 0xf4, 0x1a, 0x6e, 0x7f, 0x43, 0x75, 0x3a, 0xd3, 0x1b, 0x52, 0xef, 0x27, 0x17, 0xa1,
	0x9c, 0xf3, 0xd5, 0xd2, 0x5a, 0xf4, 0x6f, 0x2c, 0x77, 0x41, 0xd0, 0x41, 0xce, 0xa0, 0x59, 0xb7,
	0x24, 0x31, 0xe0, 0x5c, 0x4b, 0x5e, 0x46, 0xab, 0x44, 0x7f, 0xd8, 0xfd, 0x5d, 0x84, 0xd2, 0x0f,
	0xf4, 0xf7, 0x87, 0x55, 0x2e, 0x4c, 0x83, 0x04, 0x6b, 0x67, 0x46, 0xf0, 0x49, 0xba, 0xcf, 0xdc,
	0xdb, 0x4b, 0x9b, 0x8d, 0xfb, 0x86, 0x78, 0x55, 0x6a, 0xef, 0x74, 0x84, 0xcf, 0x04, 0x7c, 0xb5,
	0xd9, 0xc3, 0x52, 0xa6, 0x06, 0xff, 0x38, 0x6d, 0xf6, 0xb3, 0xe6, 0xf1, 0x3d, 0x7d, 0x8e, 0xe7,
	0xd5, 0xc3, 0xbd, 0x29, 0xe5, 0xfb, 0x28, 0xf5, 0x7b, 0x7c, 0xaf, 0x6a, 0xe6, 0x9e, 0x4d, 0x6a,
	0xd8, 0x4a, 0xa9, 0xbc, 0x81, 0x52, 0xd9, 0x46, 0xa9, 0x24, 0x94, 0x5f, 0x01, 0xca, 0x6e, 0x49,
	0xb9, 0x1e, 0x5c, 0xbf, 0x35, 0x20, 0xce, 0x5b, 0xd9, 0xe6, 0xad, 0x6c, 0xbb, 0x7b, 0x5a, 0x66,
	0xff, 0x20, 0x3e, 0xff, 0x3b, 0x00, 0x00, 0xff, 0xff, 0x08, 0xfc, 0x25, 0x32, 0x50, 0x0c, 0x00,
	0x00,
}
